document.getElementById("searchForm").addEventListener("submit", async function (e) {
  e.preventDefault();

  const nutrientInput = document.getElementById("nutrient").value.trim();
  const resultsDiv = document.getElementById("results");
  const API_KEY = "YOUR_API_KEY"; // ‚Üê –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π –∫–ª—é—á –æ—Ç FDC API

  if (!nutrientInput) {
    resultsDiv.innerHTML = "<p>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞.</p>";
    return;
  }

  resultsDiv.innerHTML = "<p>–ó–∞–≥—Ä—É–∑–∫–∞...</p>";

  try {
    let html = `<h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è: ${nutrientInput}</h2>`;

    // üî¢ –ú–∏–Ω–∏-–±–∞–∑–∞ —Å—É—Ç–æ—á–Ω—ã—Ö –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–µ–π
    const recommendedValues = {
      "protein": "60 –≥ (WHO/FAO/UNU (2007))",
      "iron": "18 –º–≥ (US DRI)",
      "vitamin d": "15 –º–∫–≥ (US DRI)",
      "alpha-linolenic acid": "1.6 –≥ (FAO/WHO)",
      "linoleic acid": "17 –≥ (FAO/WHO)",
      "eicosapentaenoic acid": "0.25 –≥ (FAO)",
      "docosahexaenoic acid": "0.25 –≥ (FAO)"
    };

    const nutrientKey = nutrientInput.toLowerCase();
    const rec = recommendedValues[nutrientKey] || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö";
    html += `<p><strong>–°—É—Ç–æ—á–Ω–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å:</strong> ${rec}</p>`;

    // üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    const searchUrl = `https://api.nal.usda.gov/fdc/v1/foods/search?query=${encodeURIComponent(nutrientInput)}&pageSize=3&api_key=${API_KEY}`;
    const searchResponse = await fetch(searchUrl);
    const searchData = await searchResponse.json();

    if (!searchData.foods || searchData.foods.length === 0) {
      resultsDiv.innerHTML = html + "<p>–ù–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø–æ —ç—Ç–æ–º—É –Ω—É—Ç—Ä–∏–µ–Ω—Ç—É.</p>";
      return;
    }

    html += "<ul>";

    for (const food of searchData.foods) {
      const detailsUrl = `https://api.nal.usda.gov/fdc/v1/food/${food.fdcId}?api_key=${API_KEY}`;
      const detailsResponse = await fetch(detailsUrl);
      const foodDetails = await detailsResponse.json();

      let foundNutrient = null;

      if (foodDetails?.foodNutrients && Array.isArray(foodDetails.foodNutrients)) {
        foundNutrient = foodDetails.foodNutrients.find(n =>
          typeof n?.nutrientName === "string" &&
          n.nutrientName.toLowerCase().includes(nutrientKey)
        );
      }

      if (foundNutrient) {
        const amount = foundNutrient.amount;
        const unit = foundNutrient.unitName;
        html += `<li>${food.description} ‚Äî <strong>${amount} ${unit}</strong></li>`;
      } else {
        html += `<li>${food.description} ‚Äî <em>–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö</em></li>`;
      }
    }

    html += "</ul>";
    resultsDiv.innerHTML = html;

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
    resultsDiv.innerHTML = "<p>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö</p>";
  }
});